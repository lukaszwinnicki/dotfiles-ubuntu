# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$_";
}

function docker_kill() {
    docker rm -f -v $(docker ps -a | grep "$@" | awk '{print $1}')
}

function fh() {
  print -z $( ([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
}

function fkill() {
  local pid
  pid=$(ps -ef | sed 1d | fzf -m | awk '{print $2}')

  if [ "x$pid" != "x" ]
  then
    echo $pid | xargs kill -${1:-9}
  fi
}

function fd() {
  local dir
  dir=$(find ${1:-.} -maxdepth 1 -mindepth 1 -type d | fzf)
  cd "$dir"
}

# fdd - cd to selected directory
function fdd() {
  local dir
  dir=$(find ${1:-.} -path '*/\.*' -prune \
                  -o -type d -print 2> /dev/null | fzf) &&
  cd "$dir"
}

function fcall() {
  local subject
  subject=$(ls -a | fzf +m)
  eval "$@ $subject"
}

#  docker exec from running containers
function fdoex() {
    local container_name
    container_name=$(docker ps --format {{.Names}} | fzf)
    cmd="docker exec -ti \"${container_name}\" bash"
    echo ${cmd}
    eval ${cmd}
}

#  docker exec from running containers
function fdosh() {
    local container_name
    container_name=$(docker ps --format {{.Names}} | fzf)
    docker exec -e COLUMNS="`tput cols`" -e LINES="`tput lines`" -ti "$container_name" /bin/sh
}

#  docker kill
function fdokill() {
    docker rm -f -v $(docker ps -a --format {{.Names}} | fzf -m )
}

function fdormi() {
    local image
    local image_id
    image=$(docker images | grep -v REPOSITORY | fzf)
    image_id=$(echo $image | awk '{print $3}')
    cmd="docker rmi -f ${image_id}"
    echo ${cmd}
    eval ${cmd}
}

function fdormim() {
    local images
    local images_ids
    images=$(docker images | grep -v REPOSITORY | fzf -m)
    images_ids_in_one_line=$(echo $images | awk '{print $3}')
    images_ids=(${(f)images_ids_in_one_line})
    #for image_id_raw in $images_ids; do
    for image_id in "${images_ids[@]}"; do
        cmd="docker rmi -f ${image_id}"
        echo ${cmd}
        eval ${cmd}
    done
}

function fmake() {
    local subject
    subject=$(egrep '^[a-zA-Z0-9_\-]+:{1}' Makefile | cut -d ':' -f 1 | fzf)
    make "$subject"
}

# git
function fgcheckout() {
    local branch_name
    branch_name=$(git branch | awk '{print $1}' | fzf)
    git checkout "$branch_name"
}

# k8s
function fkubex() {
    local pod_name
    pod_name=$(kubectl get pods --no-headers -o custom-columns=":metadata.name" | fzf)
    kubectl exec -ti "$pod_name" -- bash
}

function fkubexsh() {
    local pod_name
    pod_name=$(kubectl get pods --no-headers -o custom-columns=":metadata.name" | fzf)
    kubectl exec -ti "$pod_name" -- /bin/sh
}

function kube_port_forward () {
    namespace=$1
    deployment_name=$2
    port_mapping=$3
    cmd="kubectl port-forward --namespace ${namespace} deployment/${deployment_name} ${port_mapping} &"
    echo ${cmd}
    eval ${cmd}
}

function alert() {
    msg=$1
    zenity --info --text "$msg"
}
